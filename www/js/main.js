(()=>{"use strict";class t{async getMethod(t,e){return await fetch(t,{method:"GET",headers:e}).then((t=>t.json()))}async postMethod(t,e,s){return await fetch(t,{method:"POST",headers:s,body:JSON.stringify(e)}).then((t=>t.json()))}}class e{constructor(){this.mapsHash=[],this.tournamentID=4,this.poolID=7,this.mapID=0,this.infoGrabber=$(".infoGrabber"),this.infoGrabberStatus=$(".infoGrabberStatus"),this.infoGrabberInteraction=$(".infoGrabberInteraction"),this._tools=new t,this.getMaps(this.tournamentID,this.poolID)}async sendData(t,e,s){if(this.infoGrabberInteraction.removeClass("text-glow-cyan text-green text-red text-orange"),this.mapsHash.includes(t.hash.toUpperCase())){this.infoGrabberInteraction.html('<i class="fa-solid fa-magnifying-glass-chart"></i> Analysing: '+e.author+" - "+e.title),this.infoGrabberInteraction.addClass("text-glow-cyan"),this.createMapsCard(e,s);const a=$(".pass");await this.getMapID(this.tournamentID,this.poolID,t.hash);const i={tournamentID:this.tournamentID,poolID:this.poolID,mapID:this.mapID,data:t};let o=await this._tools.postMethod("/api/setScore",i);console.log(o),setTimeout((()=>{void 0!==o.error&&(this.infoGrabberInteraction.removeClass("text-glow-cyan text-green text-red text-orange"),this.infoGrabberInteraction.html('<i class="fa-regular fa-circle-xmark"></i> Fail: '+e.author+" - "+e.title),this.infoGrabberInteraction.addClass("text-red"),a.last().find(".infoAPI").html('<i class="fa-regular fa-circle-xmark"></i> Fail: '+o.error).removeClass("text-glow-cyan text-green text-red text-orange").addClass("text-red")),void 0!==o.warning&&(this.infoGrabberInteraction.removeClass("text-glow-cyan text-green text-red text-orange"),this.infoGrabberInteraction.html('<i class="fa-solid fa-circle-exclamation"></i> Warning: '+e.author+" - "+e.title),this.infoGrabberInteraction.addClass("text-orange"),a.last().find(".infoAPI").html('<i class="fa-solid fa-circle-exclamation"></i> Warning: '+o.warning).removeClass("text-glow-cyan text-green text-red text-orange").addClass("text-orange")),void 0!==o.success&&(this.infoGrabberInteraction.removeClass("text-glow-cyan text-green text-red text-orange"),this.infoGrabberInteraction.html('<i class="fa-regular fa-circle-check"></i> Success: '+e.author+" - "+e.title),this.infoGrabberInteraction.addClass("text-green"),a.last().find(".infoAPI").html('<i class="fa-regular fa-circle-check"></i> Success: '+o.success).removeClass("text-glow-cyan text-green text-red text-orange").addClass("text-green"))}),1e3)}}async getMaps(t,e){this.maps=await this._tools.getMethod("/api/getMaps/"+t+"/"+e);for(let t=0;t<this.maps.length;t++)this.mapsHash.push(this.maps[t].hash.toUpperCase())}async getMapID(t,e,s){for(let t=0;t<this.maps.length;t++)this.maps[t].hash.toUpperCase()===s.toUpperCase()&&(this.mapID=this.maps[t].id)}createMapsCard(t,e){$(".pass").append('<div class="wrapper grabberSong">                <div class="collapsible-background">                    <img src="'+t.cover+'"  alt="cover song"/>                </div>                <div class="collapsible-content">                    <p class="collapsible-content-title">'+t.author+'</p>                    <div class="collapsible-content-information flex flex-column flex-spaced">                        <p class="flex-grow2 text-left text-cut">'+t.title+'</p>                        <p class="infoAPI text-left text-cut"></p>                    </div>                </div>            </div>')}static get Instance(){return this._instance||(this._instance=new this)}}class s{constructor(){this.sockets=new Map,this.reconnectInterval=new Map,this.reconnecting=new Map}anyOpen(){for(const t of this.sockets.values())if(t.readyState===WebSocket.OPEN)return!0;return!1}add(t,e,s,a,i,o,n=!1,r=5e3){const c=new WebSocket(e);c.onopen=t=>a(t),c.onmessage=t=>s(t.data),c.onclose=c=>{i(c),this.sockets.get(t)&&this.reconnect(t,e,s,a,i,o,n,r)},c.onerror=t=>o(t),this.sockets.set(t,c),this.reconnectInterval.set(t,r),this.reconnecting.set(t,!1)}reconnect(t,e,s,a,i,o,n,r){this.sockets.get(t)&&(!n&&!this.anyOpen()||n?this.reconnecting.get(t)||(this.reconnecting.set(t,!0),console.log(t+" WebSocket reconnecting in "+this.reconnectInterval.get(t)+"ms"),setTimeout((()=>{this.sockets.get(t)&&this.add(t,e,s,a,i,o,n,r),this.reconnecting.set(t,!1)}),r)):this.reconnecting.get(t)||setTimeout((()=>{this.reconnecting.set(t,!1),this.sockets.get(t)&&this.reconnect(t,e,s,a,i,o,n,r)}),r))}remove(t){this.sockets.get(t)?.close(),this.sockets.delete(t),this.reconnectInterval.delete(t),this.reconnecting.delete(t)}get(t){return this.sockets.get(t)}send(t,e){const s=this.sockets.get(t);s&&s.send(e)}}class a{constructor(){this.mapsSong={title:"Title",subtitle:"SubTitle",author:"Beat Saber",mapper:"Beat Games",cover:"",songLength:0,songBeatSaverLength:0,songSpeed:1,bpm:0,totalNotes:0,hashMap:"",bsrKey:"",difficulty:"",ranked:!1,qualified:!1},this.mapsModifier={disappearingArrows:!1,ghostNotes:!1,fasterSong:!1,superFasterSong:!1,noBombs:!1,noWalls:!1,noArrows:!1,slowerSong:!1,noFail:!1,zenMode:!1,proMode:!1,modifierValue:1},this.mapsPerformance={actualSongTime:0},this.player={playerID:"",name:"Player",avatar:"",country:"",performancePoint:"",worldRank:0,countryRank:0},this.playerPerformance={score:0,accuracy:1,combo:0,miss:0,health:.5,notesPassed:0,paused:0},this.gameState="None",this.playerState="None",this._tools=new t,this._data=e.Instance}async songDetails(t){let e=await this.getSongDetails(t);if(void 0!==e.error)return;this.mapsSong.songBeatSaverLength=1e3*e.metadata.duration;let s=e.versions.length-1;if("diffs"in e.versions[s])for(let t=0;t<e.versions[s].diffs.length;t++)if("difficulty"in e.versions[s].diffs[t]&&e.versions[s].diffs[t].difficulty===this.mapsSong.difficulty){this.mapsSong.totalNotes=e.versions[s].diffs[t].notes;break}}pushData(){if("Finish"===this.playerState){let t={hash:this.mapsSong.hashMap,difficulty:this.mapsSong.difficulty,totalNote:this.mapsSong.totalNotes,songLength:this.mapsSong.songLength-this.mapsSong.songBeatSaverLength<1e3&&this.mapsSong.songLength-this.mapsSong.songBeatSaverLength>-1e3,playerState:this.playerState,modifiers:this.mapsModifier,performance:this.playerPerformance};this._data.sendData(t,this.mapsSong,this.playerPerformance)}}async getSongDetails(t){return await this._tools.getMethod("https://api.beatsaver.com/maps/hash/"+t)}static get Instance(){return this._instance||(this._instance=new this)}}class i extends a{constructor(){super(...arguments),this.infoGrabber=$(".infoGrabber"),this.infoGrabberStatus=$(".infoGrabberStatus"),this.infoGrabberInteraction=$(".infoGrabberInteraction")}eHandshake(t){console.log("Beat Saber "+t.status.game.gameVersion+" | HTTPSiraStatus Version "+t.status.game.pluginVersion),console.log("\n\n"),this.gameState="Connected"}eHandler(t){switch(t.event){case"hello":this.eHandshake(t),this.gameState="Menu",this.playerState="None",this.infoGrabber.html('<i class="fa-solid fa-circle-info"></i> Waiting for a song to start...'),this.infoGrabberInteraction.text(""),null!==t.status.beatmap&&(this.mapInfoParser(t),null!==t.status.beatmap.paused?(null!==t.status.beatmap.start&&(this.mapsPerformance.actualSongTime=t.status.beatmap.paused-t.status.beatmap.start),this.gameState="Paused",this.infoGrabber.html('<i class="fa-solid fa-circle-info"></i> Paused')):(null!==t.status.beatmap.start&&(this.mapsPerformance.actualSongTime=t.time-t.status.beatmap.start),this.gameState="Playing",this.infoGrabber.html('<i class="fa-solid fa-circle-info"></i> Playing')),this.scoreParser(t));break;case"songStart":console.log(t.status.game.mode),this.gameState="Playing",this.playerState="None",this.infoGrabber.html('<i class="fa-solid fa-circle-info"></i> Playing'),this.mapInfoParser(t),console.log("Playing: "+this.playerState+"\n\n");break;case"pause":this.gameState="Paused",this.playerPerformance.paused++,this.infoGrabber.html('<i class="fa-solid fa-circle-info"></i> Paused');break;case"resume":this.gameState="Playing",this.infoGrabber.html('<i class="fa-solid fa-circle-info"></i> Playing');break;case"finished":this.playerPerformance.notesPassed>=this.mapsSong.totalNotes?this.playerState="Finish":this.playerState="Quit",this.pushData();break;case"menu":this.gameState="Menu",this.infoGrabber.html('<i class="fa-solid fa-circle-info"></i> Waiting for a song to start...'),console.log("Menu: "+this.playerState),console.log("Total notes: "+this.mapsSong.totalNotes),console.log("Note count: "+this.playerPerformance.notesPassed);break;case"noteMissed":case"scoreChanged":this.scoreParser(t)}}mapInfoParser(t){this.mapsSong.title=t.status.beatmap?.songName,this.mapsSong.subtitle=t.status.beatmap?.songSubName,this.mapsSong.author=t.status.beatmap?.songAuthorName,this.mapsSong.mapper=""!==t.status.beatmap?.levelAuthorName?"["+t.status.beatmap?.levelAuthorName.trim()+"]":"[Beat Games]",this.mapsSong.cover=null!==t.status.beatmap?.songCover?"data:image/png;base64,"+t.status.beatmap?.songCover:"./pictures/default/notFound.jpg",this.mapsSong.songLength=t.status.beatmap?.length,this.mapsSong.songBeatSaverLength=0,this.mapsSong.songSpeed=1,this.mapsSong.bpm=t.status.beatmap?.songBPM,this.mapsSong.totalNotes=0,this.mapsSong.hashMap=t.status.beatmap?.songHash,this.mapsSong.bsrKey="",this.mapsSong.difficulty=t.status.beatmap?.difficultyEnum,this.mapsSong.ranked=!1,this.mapsSong.qualified=!1,this.mapsModifier.disappearingArrows=t.status.mod.disappearingArrows,this.mapsModifier.ghostNotes=t.status.mod.ghostNotes,this.mapsModifier.fasterSong="Faster"===t.status.mod.songSpeed,this.mapsModifier.superFasterSong="SuperFast"===t.status.mod.songSpeed,this.mapsModifier.noBombs=t.status.mod.noBombs,this.mapsModifier.noWalls=!1===t.status.mod.obstacles,this.mapsModifier.noArrows=t.status.mod.noArrows,this.mapsModifier.slowerSong="Slower"===t.status.mod.songSpeed,this.mapsModifier.noFail=t.status.mod.noFail,this.mapsModifier.zenMode=t.status.mod.zenMode,this.mapsModifier.proMode=t.status.mod.proMode,this.mapsModifier.modifierValue=t.status.mod.multiplier,this.mapsPerformance.actualSongTime=null!==t.status.beatmap?.start&&void 0!==t.status.beatmap?.start?t.time-t.status.beatmap?.start:0,this.playerPerformance.score=0,this.playerPerformance.accuracy=1,this.playerPerformance.combo=0,this.playerPerformance.miss=0,this.playerPerformance.health=.5,this.playerPerformance.notesPassed=0,this.playerPerformance.paused=0,console.log("Hash maps: "+t.status.beatmap?.songHash),this.songDetails(t.status.beatmap?.songHash),this.infoGrabberInteraction.removeClass("text-glow-cyan text-green text-red text-orange"),this.infoGrabberInteraction.html('<i class="fa-solid fa-music"></i> Actually playing: '+this.mapsSong.author+" - "+this.mapsSong.title)}scoreParser(t){void 0!==t.status.performance?.currentSongTime&&(this.mapsPerformance.actualSongTime=1e3*t.status.performance?.currentSongTime),this.playerPerformance.score=t.status.performance?.score,this.playerPerformance.accuracy=t.status.performance?.relativeScore,this.playerPerformance.combo=t.status.performance?.combo,this.playerPerformance.miss=t.status.performance?.missedNotes,this.playerPerformance.health=1,this.playerPerformance.notesPassed=t.status.performance?.passedNotes,t.status.performance?.softFailed&&(this.playerState="Failed")}dataParser(t){let e=JSON.parse(t);this.eHandler(e)}}class o{constructor(){this.websocketVersion=0,this.websocketStatus="DISCONNECTED",this._websocketManager=new s,this._httpSiraStatus=new i}async connection(){this.websocketVersion++;let t=0;const e=$(".infoGrabber"),s=$(".infoGrabberStatus");e.html('<i class="fa-solid fa-circle-info"></i> Connecting...'),s.text("Non connecté"),this._websocketManager.add("HttpSiraStatus"+this.websocketVersion,"ws://127.0.0.1:6557/socket",(t=>{this._httpSiraStatus.dataParser(t)}),(()=>{e.text('<i class="fa-solid fa-circle-info"></i> Connecté'),console.log("socket initialized on HttpSiraStatus!"),this.websocketStatus="CONNECTED",s.text("Connecté")}),(()=>{t<2?e.html('<i class="fa-solid fa-circle-info"></i> Déconnecté...'):e.html('<i class="fa-solid fa-circle-info"></i> Déconnecté, HTTPSiraStatus/WebSocketSharp est bien installé ?'),this.websocketStatus,this.websocketStatus="DISCONNECTED",s.text("Non connecté"),t++}),(()=>{console.log("init of HttpSiraStatus socket failed!")}))}removeConnection(){return new Promise((t=>{this._websocketManager.remove("HttpSiraStatus"+this.websocketVersion),setTimeout((()=>t("")),250)}))}static get Instance(){return this._instance||(this._instance=new this)}}new class{constructor(){console.info("Grabber !"),console.info("For Team France"),console.info("Plugins used: HTTPSiraStatus"),console.info("Games used: Beat Saber"),this._data=e.Instance,this._plugins=o.Instance,(async()=>{await this.appInit(),window.timeStamp=window.timeStamp+performance.now()})()}async appInit(){await this._plugins.connection()}}})();